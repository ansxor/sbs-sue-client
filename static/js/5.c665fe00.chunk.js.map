{"version":3,"sources":["components/TestComment.jsx","routes/TestCommentView.jsx"],"names":["TestComment","props","useState","comment","content","setContent","useEffect","rawContent","newContent","metadata","messageMetadata","substr","indexOf","JSON","parse","e","m","output","Parse","parseLang","rootElement","document","createElement","appendChild","innerHTML","user","username","dangerouslySetInnerHTML","__html","TestCommentView","comments","setComments","users","setUsers","match","useRouteMatch","console","log","params","pid","usertoken","parseInt","page","stringify","ids","commentString","parentIds","reverse","limit","initialRequestURL","fetch","method","then","res","json","data","commentsData","usersData","catch","err","error","style","width","height","overflow","map","c","deleted","u","find","x","id","createUserId","memo"],"mappings":"sKA8CeA,MA3Cf,SAAqBC,GAAQ,IAAD,EACIC,mBAASD,EAAME,QAAQC,SAD3B,mBACnBA,EADmB,KACVC,EADU,KAkC1B,OA/BAC,qBAAU,WACR,IAAMC,EAAaN,EAAME,QAAQC,QAC7BI,EAAaD,EACbE,EAAW,CAAC,EAAK,KAErB,IACE,IAAMC,EAAkBH,EAAWI,OAAO,EAAGJ,EAAWK,QAAQ,OAChEH,EAAWI,KAAKC,MAAMJ,GACtBF,EAAaD,EAAWI,OAAOJ,EAAWK,QAAQ,MAAM,GAE1D,MAAOG,IAIP,OAAQN,EAASO,GACf,IAAK,IACHX,EAAWG,GACb,MACA,IAAK,MACH,IAAMS,EAASC,IAAMC,UAAUX,EAAYC,EAASO,GAChDI,EAAcC,SAASC,cAAc,OACzCF,EAAYG,YAAYN,GACxBZ,EAAWe,EAAYI,WAEzB,MACA,QACEnB,EAAW,yCAA2CI,EAASO,MAGlE,CAACf,EAAME,QAAQC,UAGhB,gCACE,iCAASH,EAAMwB,KAAKC,WADtB,IAGE,qBAAKC,wBAAyB,CAACC,OAAQxB,SCrC7C,SAASyB,EAAgB5B,GAAQ,IAAD,EACAC,mBAAS,OADT,mBACdG,GADc,aAEEH,mBAAS,IAFX,mBAEvB4B,EAFuB,KAEbC,EAFa,OAGJ7B,mBAAS,IAHL,mBAGvB8B,EAHuB,KAGhBC,EAHgB,KAgB1BC,EAAQC,YAAc,6BA6B1B,OA3BA7B,qBAAU,WACR8B,QAAQC,IAAIH,EAAMI,OAAOC,KACvBH,QAAQC,IAAIpC,EAAMuC,WACpB,IAAMD,EAAME,SAASP,EAAMI,OAAOC,KAC5BG,EAAO7B,KAAK8B,UAAU,CAAEC,IAAK,CAACL,KAC9BM,EAAgBhC,KAAK8B,UAAU,CACnCG,UAAW,CAACP,GACZQ,SAAS,EACTC,MAAO,KAEHC,EAAiB,+EAA2EP,EAA3E,6CAAoHG,EAApH,kDACvBK,MAAMD,EAAmB,CACvBE,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAAeD,EAAKpD,QACpBsD,EAAYF,EAAK9B,KACP8B,EAAKnD,QAAQ,GAE7BC,EAAWQ,KAAK8B,UAAUc,IAC1BxB,EAASwB,GACT1B,EAAYyB,EAAaT,cAE1BW,OAAM,SAACC,GAAD,OAASvB,QAAQwB,MAAMD,QAC/B,CAACzB,EAAMI,OAAOC,IAAKtC,EAAMuC,YAG1B,qBACEqB,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,QAJd,SAOGlC,EAASmC,KAAI,SAACC,GACb,IAAKA,EAAEC,QAAS,CACd,IAAMC,EAAIpC,EAAMqC,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOL,EAAEM,gBACvC,OAAQ,cAAC,EAAD,CAAwB/C,KAAM2C,EAAGjE,QAAS+D,GAAxBA,EAAEK,IAE9B,OAAQ,uBAAUL,EAAEK,SAMbE,yBAAK5C","file":"static/js/5.c665fe00.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Parse from \"../parse.js\";\n\nfunction TestComment(props) {\n  const [content, setContent] = useState(props.comment.content);\n\n  useEffect(() => {\n    const rawContent = props.comment.content;\n    let newContent = rawContent;\n    let metadata = {\"m\": \"t\"} ;\n    // try extracting the metadata from the message and reading it\n    try {\n      const messageMetadata = rawContent.substr(0, rawContent.indexOf(\"\\n\"));\n      metadata = JSON.parse(messageMetadata);\n      newContent = rawContent.substr(rawContent.indexOf(\"\\n\")+1);\n    }\n    catch (e) {\n      // this is a legacy message format and will be ignored accordingly\n    } \n    \n    switch (metadata.m) {\n      case \"t\":\n        setContent(newContent)\n      break;\n      case \"12y\": {\n        const output = Parse.parseLang(newContent, metadata.m)\n        let rootElement = document.createElement(\"div\");\n        rootElement.appendChild(output);\n        setContent(rootElement.innerHTML)\n      }\n      break;\n      default:\n        setContent(\"THIS PARSING TYPE IS NOT SUPPORTED :( \" + metadata.m);\n      break;\n    }\n  }, [props.comment.content])\n\n  return (\n    <div>\n      <strong>{props.user.username}</strong>\n      : \n      <div dangerouslySetInnerHTML={{__html: content}} />\n    </div>\n  );\n}\n\nexport default TestComment;\n","import React, { useEffect, useState, memo } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport TestComment from \"../components/TestComment\";\n\nfunction TestCommentView(props) {\n  const [content, setContent] = useState(\"owo\");\n  const [comments, setComments] = useState([]);\n  const [users, setUsers] = useState([]);\n  const getListenerURL = () => {\n    const listenerParams = JSON.stringify({\n      \"lastId\": comments[comments.length-1].id,\n      \"chains\": [\n        \"comment.0id\",\n        \"user.1createUserId\",\n        \"content.1parentId\"\n      ]\n    })\n    const listenerURL = `https://newdev.smilebasicsource.com/api/Read/listen?actions=${listenerParams}` \n    return listenerURL;\n  }\n  let match = useRouteMatch(\"/sbs-sue-client/chat/:pid\");\n\n  useEffect(() => {\n    console.log(match.params.pid);\n      console.log(props.usertoken)\n    const pid = parseInt(match.params.pid);\n    const page = JSON.stringify({ ids: [pid] });\n    const commentString = JSON.stringify({\n      parentIds: [pid],\n      reverse: true,\n      limit: 15,\n    });\n    const initialRequestURL = `https://newdev.smilebasicsource.com/api/Read/chain/?requests=content-${page}&content=name,id&requests=comment-${commentString}&requests=user.1createUserId&content.1parentId`;\n    fetch(initialRequestURL, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const commentsData = data.comment;\n        const usersData = data.user;\n        const content = data.content[0];\n\n        setContent(JSON.stringify(usersData));\n        setUsers(usersData)\n        setComments(commentsData.reverse())\n      })\n      .catch((err) => console.error(err));\n  }, [match.params.pid, props.usertoken]);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        overflow: \"auto\",\n      }}\n    >\n      {comments.map((c) => {\n        if (!c.deleted) {\n          const u = users.find((x) => x.id === c.createUserId);\n          return (<TestComment key={c.id} user={u} comment={c} />);\n        }\n        return (<div key={c.id}></div>)\n      })}\n    </div>\n  );\n}\n\nexport default memo(TestCommentView);\n"],"sourceRoot":""}